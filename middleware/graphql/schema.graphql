interface BaseEntity {
	id: String
	key: String
}

type Project implements BaseEntity {
	id: String
	key: String
	name: String
	description: String
	webLink: String
	icon: String
	budget: Int
	hourlyRate: Int
	customerKey: String
}

type Customer implements BaseEntity {
	id: String
	key: String
	name: String
	description: String
	webLink: String
}

type Event implements BaseEntity {
	id: String
	key: String
	title: String!
	body: String
	isOrganizer: Boolean
	startTime: String
	endTime: String
	durationHours: Float
	durationMinutes: Int
	project: Project
	customer: Customer
	projectKey: String
	customerKey: String
	suggestedProject: Project
	webLink: String
	lastModifiedDateTime: String
	overtime: Boolean
}

type TimeEntry implements BaseEntity {
	id: String
	key: String
	eventId: String!
	title: String!
	description: String
	startTime: String
	endTime: String
	webLink: String
	durationHours: Float
	durationMinutes: Int
	projectId: String
	weekNumber: Int
	yearNumber: Int
	resourceId: String
	resourceEmail: String
	resourceName: String
	webUrl: String
	overtime: Boolean
	project: Project
	customer: Customer
}

type Week implements BaseEntity {
	id: String
	key: String
	closed: Boolean!
}

type User implements BaseEntity {
	id: String
	key: String
	role: String!
	fullName: String!
}

input TimeEntryInput {
	id: String
	projectId: String
}

type EventData {
	weekNumber: Int
	events: [Event!]!
	matchedEvents: [Event!]!
	totalDuration: Float!
	matchedDuration: Float!
	confirmedDuration: Float!
}

type ConfirmedTimeEntries {
	entries: [TimeEntry!]
	duration: Float
}


type Query {
	getCustomers: [Customer!]!
	getProjects(customerKey: String, sortBy: String): [Project!]!
	getEventData(weekNumber: Int!): EventData!
	getConfirmedTimeEntries(
	projectId: String, 
	resourceId: String, 
	weekNumber: Int, 
	yearNumber: Int, 
	currentUser: Boolean
	dateFormat: String
	): ConfirmedTimeEntries
	getWeeks: [Week!]!
	getUsers: [User!]!
}

type BaseResult {
	success: Boolean
	error: String
}

type Mutation {
	createProject(customerKey: String!, projectKey: String!, name: String!): String
	confirmWeek(entries: [TimeEntryInput!], weekNumber: Int!): BaseResult!
	unconfirmWeek(weekNumber: Int!): BaseResult!
	updateWeek(weekNumber: Int!, closed: Boolean!): Boolean!
}