type Project {
	id: String
	key: String
	projectKey: String
	customer: Customer
	name: String
	description: String, 
	webLink: String, 
	icon: String
}

type Customer {
	id: String
	key: String
	customerKey: String
	name: String
	description: String
	webLink: String
}

type Event {
	id: String!
	title: String!
	body: String
	startTime: String
	endTime: String
	durationHours: Float
	durationMinutes: Int
	project: Project
	customer: Customer
	projectKey: String
	customerKey: String
	suggestedProject: Project
	webLink: String
	lastModifiedDateTime: String
	overtime: Boolean
}

type TimeEntry {
	id: String!
	title: String!
	description: String
	startTime: String
	endTime: String
	webLink: String
	durationHours: Float
	durationMinutes: Int
	customerKey: String
	projectKey: String
	weekNumber: Int
	yearNumber: Int
	resourceId: String
	resourceEmail: String
	resourceName: String
	webUrl: String
	overtime: Boolean
}

input TimeEntryInput {
	id: String
	projectKey: String
}

type EventData {
	weekNumber: Int
	events: [Event!]!
	matchedEvents: [Event!]!
	totalDuration: Float!
	matchedDuration: Float!
	confirmedDuration: Float!
}

type Query {
	getCustomers: [Customer!]!
	getProjects(customerKey: String, sortBy: String): [Project!]!
	getEvents(weekNumber: Int!): EventData!
	getConfirmedTimeEntries(projectKey: String, resourceId: String): [TimeEntry!]!
}

type Mutation {
	confirmWeek(entries: [TimeEntryInput!], weekNumber: Int!): Float!
	unconfirmWeek(weekNumber: Int!): Boolean!
}