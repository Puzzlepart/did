type Project {
	id: String!
	key: String!
	customerKey: String
	projectKey: String
	name: String
	description: String, 
	webLink: String, 
	icon: String
}

type Customer {
	id: String!
	key: String!
	customerKey: String
	name: String
	description: String
	webLink: String
}

type Event {
	id: String!
	title: String!
	startTime: String
	endTime: String
	durationHours: Float
	durationMinutes: Int
	project: Project
	webLink: String
	lastModifiedDateTime: String
}

type TimeEntry {
	id: String!
	title: String!
	description: String
	startTime: String
	endTime: String
	webLink: String
	durationHours: Float
	durationMinutes: Int
	customerKey: String
	projectKey: String
	weekNumber: Int
	yearNumber: Int
	resourceId: String
	resourceEmail: String
	resourceName: String
	webUrl: String
}

input TimeEntryInput {
	id: String
	projectKey: String
}

type EventData {
	weekNumber: Int
	events: [Event!]!
	totalDuration: Int!
	matchedDuration: Int!
}

type Query {
	getCustomers: [Customer!]!
	getProjects(customerKey: String): [Project!]!
	getEvents(weekNumber: Int!): EventData!
	confirmedHours(weekNumber: Int!): Float!
	confirmedEntries(projectKey: String, resourceId: String): [TimeEntry!]!
}

type Mutation {
	confirmWeek(entries: [TimeEntryInput!], weekNumber: Int!): Float!
	unconfirmWeek(weekNumber: Int!): Boolean!
}